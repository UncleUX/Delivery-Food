"""
Django settings for wazieats project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from .env import *
import os
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv('SECRET_KEY')
# Application definition

DEBUG = os.getenv('DEBUG')

# Application allow hosts

ALLOWED_HOSTS = ['*']

# Shared Apps
SHARED_APPS = (
    'django_tenants',  # mandatory
    'accounts',
    'core',
    'drink',
    'food',

    # everything below here is optional
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # Third-Party Apps
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'drf_yasg',
)

# Tenant apps

TENANT_APPS = (
    'django.contrib.contenttypes',
    'restaurantFood',
    'restaurantDrink',
    'restaurantMenu',
    'restaurantCommande',
)

INSTALLED_APPS = list(SHARED_APPS) + \
    [app for app in TENANT_APPS if app not in SHARED_APPS]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.CustomPageNumberPagination',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wazieats.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
            },
        },
    },
]

WSGI_APPLICATION = 'wazieats.wsgi.application'

AUTH_USER_MODEL = 'accounts.User'

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },  # setting to pass token in header
    "SUPPORTED_SUBMIT_METHODS": ['get', 'put', 'post', 'delete'],
    'JSON_EDITOR': False,
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = '/static/'
# STATIC_URL = 'https://storage.googleapis.com/project-bucket/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

MEDIA_ROOT = os.path.join(
    'https://storage.googleapis.com/project-bucket/', 'media')
MEDIA_URL = 'https://storage.googleapis.com/project-bucket/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Enabling Cors
CORS_ORIGIN_ALLOW_ALL = True

TENANT_MODEL = 'accounts.Restaurant'  # app.Model

TENANT_DOMAIN_MODEL = "accounts.Domain"  # app.Model

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = 'staging.wazieats.appspot.com'
# STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_PROJECT_ID = 'wazieats'

GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.dirname(PROJECT_ROOT) + "/wazieats-111df7be92b4.json"
    # "/Users/apple/Projects/WaziEats/backend/backend/backend/wazieats-111df7be92b4.json"
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'filter_info_level': {
            '()': 'core.log_middleware.FilterLevels',
            'filter_levels': [
                "INFO"
            ]
        },
        'filter_error_level': {
            '()': 'core.log_middleware.FilterLevels',
            'filter_levels': [
                "ERROR"
            ]
        },
        'filter_warning_level': {
            '()': 'core.log_middleware.FilterLevels',
            'filter_levels': [
                "WARNING"
            ]
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'formatters': {
        'info-formatter': {
            'format': '%(levelname)s : %(asctime)s : %(restaurant)s : %(user)s : %(msecs)d : %(message)s : %(module)s : %(exc_info)s'
        },
        'error-formatter': {
            'format': '%(levelname)s : %(asctime)s : %(restaurant)s : %(user)s : %(msecs)d : {%(module)s} : [%(funcName)s] : %(message)s : [in %(pathname)s:%(filename)s:%(lineno)d]',
            'datefmt': '%Y-%m-%d %H:%M'
        },
        'short': {
            'format': '%(levelname)s : %(asctime)s : %(restaurant)s : %(user)s : %(msecs)d : %(message)s : %(module)s : [in %(pathname)s:%(filename)s:%(lineno)d]'
        }
    },
    'handlers': {
        'customHandler_1': {
            'formatter': 'info-formatter',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'encoding': 'utf8',
            'filters': ['filter_info_level'],
        },
        'customHandler_2': {
            'formatter': 'error-formatter',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'encoding': 'utf8',
            'filters': ['filter_error_level'],
        },
        'customHandler_3': {
            'formatter': 'short',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'encoding': 'utf8',
            'filters': ['filter_warning_level'],
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'email_backend': 'django.core.mail.backends.filebased.EmailBackend'
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'myLogger': {
            'handlers': [
                'customHandler_1',
                'customHandler_2',
                'customHandler_3',
                'mail_admins',
                'console'
            ],
            'level': 'DEBUG',
        },
    },
}

MANAGERS = ADMINS
EMAIL_SUBJECT_PREFIX = ''
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'logs/logs_messages')

MAP_API_KEY = 'AIzaSyBAsIkokr1AAUEApleefx8-CJ53mmVy3es'

WAZIEATS_PHONE_NUMBER = '+237698355489'
ACCESS_TOKEN = 'by9NG7oew9Qenwcrlop0P6RVt6Nd'
TYPE_TOKEN = 'Bearer'
ORANGE_CLIENT_ID = '83f8GoIaysyU9dtPqsKZtob1NUc9GpKW'
ORANGE_CLIENT_SECRET = 'D2DxFexZoXkDMYNh'

TIME_INPUT_FORMATS = ['%H:%M']

TWILIO_PHONE_NUMBER = '+13252464584'
TWILIO_SID = 'AC598b18fc6bedfab4273fa2f9c704d6d9'
TWILIO_AUTH = 'b449d11ebd583a4f6509cec842d1f784'
